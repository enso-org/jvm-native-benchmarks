// automatically generated by the FlatBuffers compiler, do not modify
package test.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class App extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static App getRootAsApp(ByteBuffer _bb) { return getRootAsApp(_bb, new App()); }
  public static App getRootAsApp(ByteBuffer _bb, App obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public App __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte funType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table fun(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }
  public byte argType() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table arg(Table obj) { int o = __offset(10); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createApp(FlatBufferBuilder builder,
      byte fun_type,
      int funOffset,
      byte arg_type,
      int argOffset) {
    builder.startTable(4);
    App.addArg(builder, argOffset);
    App.addFun(builder, funOffset);
    App.addArgType(builder, arg_type);
    App.addFunType(builder, fun_type);
    return App.endApp(builder);
  }

  public static void startApp(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addFunType(FlatBufferBuilder builder, byte funType) { builder.addByte(0, funType, 0); }
  public static void addFun(FlatBufferBuilder builder, int funOffset) { builder.addOffset(1, funOffset, 0); }
  public static void addArgType(FlatBufferBuilder builder, byte argType) { builder.addByte(2, argType, 0); }
  public static void addArg(FlatBufferBuilder builder, int argOffset) { builder.addOffset(3, argOffset, 0); }
  public static int endApp(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public App get(int j) { return get(new App(), j); }
    public App get(App obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

